/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package ViewControllers;

import Managers.BaseProductManager;
import Entities.BaseProduct;
import Entities.Customer;
import Entities.FinalProduct;
import Entities.FinalProductToppings;
import Entities.FinalProductToppingsId;
import Entities.OtherProduct;
import Entities.Topping;
import Helpers.Size;
import Managers.BaseProductManagerImplementation;
import Managers.FinalProductManager;
import Managers.FinalProductManagerImplementation;
import Managers.FinalProductToppingsManager;
import Managers.FinalProductToppingsManagerImplementation;
import Managers.OtherProductManager;
import Managers.OtherProductManagerImplementation;
import Managers.ToppingManager;
import Managers.ToppingManagerImplementation;
import View.Main;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import javax.swing.JButton;
import javax.swing.JComboBox;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Asus
 */
public class SalesModule extends javax.swing.JFrame {

    /**
     * Creates new form Sales
     */
    public SalesModule() {
        initComponents();
        BaseProductManager baseProductManager = new BaseProductManagerImplementation();
        List baseProductsList = baseProductManager.getAll();
        Iterator<BaseProduct> iterator = baseProductsList.iterator();
        while (iterator.hasNext()) {
            BaseProduct currentBase = iterator.next();
            m_baseProductComboBox.addItem(currentBase.getName());
        }
        
        m_productSizeComboBox.addItem(Size.SMALL);
        m_productSizeComboBox.addItem(Size.MEDIUM);
        m_productSizeComboBox.addItem(Size.LARGE);
        
        //List toppingsList = toppingManager.getAll();
        m_firstToppingComboBox.setVisible(true);
        m_secondToppingComboBox.setVisible(true);
        m_thirdToppingComboBox.setVisible(true);
        m_fourthToppingComboBox.setVisible(false);
        m_fifthToppingComboBox.setVisible(false);
        ToppingManager toppingManager = new ToppingManagerImplementation();
        List toppingList = toppingManager.getAll();
        Iterator<Topping> toppingIterator = toppingList.iterator();
        while (toppingIterator.hasNext()) {
            Topping currentTopping = toppingIterator.next();
            //m_baseProductComboBox.addItem(currentTopping.getName());
            m_firstToppingComboBox.addItem(currentTopping.getName());
            m_secondToppingComboBox.addItem(currentTopping.getName());
            m_thirdToppingComboBox.addItem(currentTopping.getName());
            m_fourthToppingComboBox.addItem(currentTopping.getName());
            m_fifthToppingComboBox.addItem(currentTopping.getName());
        }
        
        OtherProductManager otherProductManager = new OtherProductManagerImplementation();
        List otherProductsList = otherProductManager.getAll();
        Iterator<OtherProduct> otherProductsIterator = otherProductsList.iterator();
        while (otherProductsIterator.hasNext()) {
            OtherProduct currentOtherProduct = otherProductsIterator.next();
            m_otherProductsComboBox.addItem(currentOtherProduct.getName());
        }
    }
    
    public void setCustomerName(String customerName){
        m_customerNameTextField.setText(customerName);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        bindingGroup = new org.jdesktop.beansbinding.BindingGroup();

        m_baseProductComboBox = new javax.swing.JComboBox();
        m_productSizeComboBox = new javax.swing.JComboBox();
        m_secondToppingComboBox = new javax.swing.JComboBox();
        m_firstToppingComboBox = new javax.swing.JComboBox();
        m_thirdToppingComboBox = new javax.swing.JComboBox();
        m_otherProductButton = new javax.swing.JButton();
        m_fourthToppingComboBox = new javax.swing.JComboBox();
        m_extraTopping = new javax.swing.JButton();
        m_baseProductAddButton = new javax.swing.JButton();
        m_otherProductsComboBox = new javax.swing.JComboBox();
        m_completeSaleButton = new javax.swing.JButton();
        m_fifthToppingComboBox = new javax.swing.JComboBox();
        m_searchBaseProduct = new javax.swing.JButton();
        m_searchOtherProduct = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        m_productTable = new javax.swing.JTable();
        m_subTotalLabel = new javax.swing.JLabel();
        m_discountPercentageLabel = new javax.swing.JLabel();
        m_TotalLabel = new javax.swing.JLabel();
        m_subTotalField = new javax.swing.JTextField();
        m_discountPercentageField = new javax.swing.JTextField();
        m_totalField = new javax.swing.JTextField();
        m_percentageLabel = new javax.swing.JLabel();
        m_discountCashLabel = new javax.swing.JLabel();
        m_discountCashField = new javax.swing.JTextField();
        m_removeProductButton = new javax.swing.JButton();
        m_customerNameTextField = new javax.swing.JTextField();
        m_searchCustomerButton = new javax.swing.JButton();
        m_customerNameLabel = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        m_baseProductComboBox.setModel(new javax.swing.DefaultComboBoxModel());

        m_productSizeComboBox.setModel(new javax.swing.DefaultComboBoxModel());
        m_productSizeComboBox.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                m_productSizeComboBoxItemStateChanged(evt);
            }
        });

        m_secondToppingComboBox.setModel(new javax.swing.DefaultComboBoxModel());

        m_firstToppingComboBox.setModel(new javax.swing.DefaultComboBoxModel());

        m_thirdToppingComboBox.setModel(new javax.swing.DefaultComboBoxModel());

        m_otherProductButton.setText("Agregar Producto");
        m_otherProductButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                m_otherProductButtonActionPerformed(evt);
            }
        });

        m_fourthToppingComboBox.setModel(new javax.swing.DefaultComboBoxModel());

        m_extraTopping.setText("Agregar Topping Extra");
        m_extraTopping.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                m_extraToppingActionPerformed(evt);
            }
        });

        m_baseProductAddButton.setText("Agregar el Producto");
        m_baseProductAddButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                m_baseProductAddButtonActionPerformed(evt);
            }
        });

        m_otherProductsComboBox.setModel(new javax.swing.DefaultComboBoxModel());

        m_completeSaleButton.setText("Guardar Venta");
        m_completeSaleButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                m_completeSaleButtonActionPerformed(evt);
            }
        });

        m_fifthToppingComboBox.setModel(new javax.swing.DefaultComboBoxModel());

        m_searchBaseProduct.setText("O.");

        m_searchOtherProduct.setText("O.");

        m_productTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "Descripci√≥n", "Toppings", "Precio"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(m_productTable);

        m_subTotalLabel.setText("Subtotal");

        m_discountPercentageLabel.setText("Descuento");

        m_TotalLabel.setText("Total");

        m_subTotalField.setText("0");

        org.jdesktop.beansbinding.Binding binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, m_subTotalField, org.jdesktop.beansbinding.ELProperty.create("false"), m_subTotalField, org.jdesktop.beansbinding.BeanProperty.create("editable"));
        bindingGroup.addBinding(binding);

        m_discountPercentageField.setText("0");
        m_discountPercentageField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                m_discountPercentageFieldKeyReleased(evt);
            }
        });

        m_totalField.setText("0");
        m_totalField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                m_totalFieldKeyReleased(evt);
            }
        });

        m_percentageLabel.setText("%");

        m_discountCashLabel.setText("Descuento en pesos");

        m_discountCashField.setText("0");
        m_discountCashField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                m_discountCashFieldKeyReleased(evt);
            }
        });

        m_removeProductButton.setText("Eliminar Producto Seleccionado");
        m_removeProductButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                m_removeProductButtonActionPerformed(evt);
            }
        });

        m_searchCustomerButton.setText("Buscar");
        m_searchCustomerButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                m_searchCustomerButtonActionPerformed(evt);
            }
        });

        m_customerNameLabel.setText("Cliente");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(40, 40, 40)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(m_discountPercentageLabel)
                            .addComponent(m_subTotalLabel)
                            .addComponent(m_TotalLabel)
                            .addComponent(m_discountCashLabel))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(m_discountCashField, javax.swing.GroupLayout.DEFAULT_SIZE, 114, Short.MAX_VALUE)
                            .addComponent(m_totalField)
                            .addComponent(m_discountPercentageField)
                            .addComponent(m_subTotalField)))
                    .addComponent(m_completeSaleButton, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                            .addComponent(m_removeProductButton)
                            .addGap(0, 0, Short.MAX_VALUE))
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(m_searchBaseProduct)
                                .addComponent(m_searchOtherProduct, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(m_otherProductsComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 174, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                    .addComponent(m_otherProductButton)
                                    .addGap(36, 36, 36)
                                    .addComponent(m_customerNameLabel)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                    .addComponent(m_customerNameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 156, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(m_searchCustomerButton, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 87, Short.MAX_VALUE))
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(m_baseProductComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 174, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                    .addComponent(m_productSizeComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 174, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGap(18, 18, 18)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(layout.createSequentialGroup()
                                            .addComponent(m_firstToppingComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                            .addComponent(m_thirdToppingComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                            .addComponent(m_fifthToppingComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 101, Short.MAX_VALUE)
                                            .addComponent(m_baseProductAddButton))
                                        .addGroup(layout.createSequentialGroup()
                                            .addComponent(m_secondToppingComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                            .addComponent(m_fourthToppingComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addComponent(m_extraTopping))))))
                        .addComponent(jScrollPane1)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(m_percentageLabel)
                .addGap(112, 112, 112))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(m_searchBaseProduct)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(m_firstToppingComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(m_thirdToppingComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(m_fifthToppingComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(m_secondToppingComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(m_fourthToppingComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(m_baseProductComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(m_productSizeComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(6, 6, 6))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(m_baseProductAddButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(m_extraTopping)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(12, 12, 12)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(m_otherProductsComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(m_searchOtherProduct)
                            .addComponent(m_otherProductButton)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(m_customerNameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(m_searchCustomerButton)
                            .addComponent(m_customerNameLabel))))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 353, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(m_subTotalField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(m_subTotalLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(m_removeProductButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(m_discountPercentageField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(m_percentageLabel)
                    .addComponent(m_discountPercentageLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(m_discountCashField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(m_discountCashLabel))
                .addGap(9, 9, 9)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(m_totalField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(m_TotalLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 15, Short.MAX_VALUE)
                .addComponent(m_completeSaleButton)
                .addContainerGap())
        );

        bindingGroup.bind();

        pack();
    }// </editor-fold>//GEN-END:initComponents
    
    private void addProductToTable(FinalProduct finalProductToAdd){
        DefaultTableModel tableModel = (DefaultTableModel) m_productTable.getModel();
        String[] rowToAdd = new String[ROW_ELEMENTS];
        BaseProduct selectedBaseProduct = getSelectedBaseProduct();
        rowToAdd[NAME_COLUMN] = selectedBaseProduct.getName();
        rowToAdd[ID_COLUMN] = finalProductToAdd.getId().toString();
        rowToAdd[PRICE_COLUMN] = String.valueOf(finalProductToAdd.getPrice());
        Size selectedSize = (Size) m_productSizeComboBox.getSelectedItem(); 
        switch(selectedSize){
            case SMALL :
                String toppings = 
                        m_firstToppingComboBox.getSelectedItem() +
                        SPACE +
                        m_secondToppingComboBox.getSelectedItem() +
                        SPACE +
                        m_thirdToppingComboBox.getSelectedItem();
                rowToAdd[TOPPINGS_COLUMN] = toppings ;
                break;
                
            case MEDIUM :
                toppings = 
                        m_firstToppingComboBox.getSelectedItem() +
                        SPACE +
                        m_secondToppingComboBox.getSelectedItem() +
                        SPACE +
                        m_thirdToppingComboBox.getSelectedItem() +
                        SPACE +
                        m_fourthToppingComboBox.getSelectedItem();
                rowToAdd[TOPPINGS_COLUMN] = toppings ;
                break;
                
            case LARGE :
                toppings = 
                        m_firstToppingComboBox.getSelectedItem() +
                        SPACE +
                        m_secondToppingComboBox.getSelectedItem() +
                        SPACE +
                        m_thirdToppingComboBox.getSelectedItem() +
                        SPACE +
                        m_fourthToppingComboBox.getSelectedItem() +
                        SPACE +
                        m_fifthToppingComboBox.getSelectedItem();
                rowToAdd[TOPPINGS_COLUMN] = toppings ;
                
            default :
                break;
        }  
        tableModel.addRow(rowToAdd);
        calculateDiscounts();
    }
    
    private BaseProduct getSelectedBaseProduct(){
        BaseProductManager baseProductManager = new BaseProductManagerImplementation();
        String selectedBaseProductName = (String) m_baseProductComboBox.getSelectedItem();
        List baseProductList = baseProductManager.searchByName(selectedBaseProductName);
        BaseProduct baseProductFound = (BaseProduct) baseProductList.get(0);
        return baseProductFound;
    }
    
    private FinalProduct saveProductToDataBase(){
        BaseProduct selectedBaseProduct = getSelectedBaseProduct();
        Size selectedSize = (Size) m_productSizeComboBox.getSelectedItem(); 
        switch(selectedSize){
            case SMALL :
                double baseProductPrice = selectedBaseProduct.getSmallPrice();
                int baseProductId = selectedBaseProduct.getId();
                FinalProduct finalProduct = addProductToDataBase(baseProductId, baseProductPrice);
                int finalProductId = finalProduct.getId();
                
                int currentToppingId = searchSelectedToppingId(m_firstToppingComboBox);
                addToppingToProductInDataBase(finalProductId, currentToppingId);
                
                currentToppingId = searchSelectedToppingId(m_secondToppingComboBox);
                addToppingToProductInDataBase(finalProductId, currentToppingId);
                
                currentToppingId = searchSelectedToppingId(m_thirdToppingComboBox);
                addToppingToProductInDataBase(finalProductId, currentToppingId);
                return finalProduct;
                
            case MEDIUM :
                baseProductPrice = selectedBaseProduct.getMediumPrice();
                baseProductId = selectedBaseProduct.getId();
                finalProduct = addProductToDataBase(baseProductId, baseProductPrice);
                finalProductId = finalProduct.getId();
                
                currentToppingId = searchSelectedToppingId(m_firstToppingComboBox);
                addToppingToProductInDataBase(finalProductId, currentToppingId);
                
                currentToppingId = searchSelectedToppingId(m_secondToppingComboBox);
                addToppingToProductInDataBase(finalProductId, currentToppingId);
                
                currentToppingId = searchSelectedToppingId(m_thirdToppingComboBox);
                addToppingToProductInDataBase(finalProductId, currentToppingId);
                
                currentToppingId = searchSelectedToppingId(m_fourthToppingComboBox);
                addToppingToProductInDataBase(finalProductId, currentToppingId);
                return finalProduct;
                
            case LARGE :
                baseProductPrice = selectedBaseProduct.getLargePrice();
                baseProductId = selectedBaseProduct.getId();
                finalProduct = addProductToDataBase(baseProductId, baseProductPrice);
                finalProductId = finalProduct.getId();
                
                currentToppingId = searchSelectedToppingId(m_firstToppingComboBox);
                addToppingToProductInDataBase(finalProductId, currentToppingId);
                
                currentToppingId = searchSelectedToppingId(m_secondToppingComboBox);
                addToppingToProductInDataBase(finalProductId, currentToppingId);
                
                currentToppingId = searchSelectedToppingId(m_thirdToppingComboBox);
                addToppingToProductInDataBase(finalProductId, currentToppingId);
                
                currentToppingId = searchSelectedToppingId(m_fourthToppingComboBox);
                addToppingToProductInDataBase(finalProductId, currentToppingId);
                
                currentToppingId = searchSelectedToppingId(m_fifthToppingComboBox);
                addToppingToProductInDataBase(finalProductId, currentToppingId);
                return finalProduct;
                
            default :
                return new FinalProduct();
        }  
    }
    
    private FinalProduct addProductToDataBase(int baseProductId, double baseProductPrice){
        FinalProduct finalProductToAdd = new FinalProduct(baseProductId, baseProductPrice);
        FinalProductManager finalProductManager = new FinalProductManagerImplementation();
        finalProductManager.add(finalProductToAdd);
        int finalProductId = finalProductToAdd.getId();
        return finalProductToAdd;
    }
    
    private void addToppingToProductInDataBase(int finalProductId, int toppingId){
        FinalProductToppingsId finalProductToppingsIdToAdd = new FinalProductToppingsId(finalProductId, toppingId);
        FinalProductToppings finalProductToppingsToAdd = new FinalProductToppings(finalProductToppingsIdToAdd);
        FinalProductToppingsManager finalProductToppingsManager = new FinalProductToppingsManagerImplementation();
        finalProductToppingsManager.add(finalProductToppingsToAdd);
    }
    
    private int searchSelectedToppingId(JComboBox selectedComboBox){
        String toppingName = (String) selectedComboBox.getSelectedItem();
        ToppingManager toppingManager = new ToppingManagerImplementation();
        List<Topping> toppingFoundList = toppingManager.searchByName(toppingName);
        Topping currentTopping = toppingFoundList.get(0);
        int toppingId = currentTopping.getId();
        return toppingId;
    }
    
    private void addToppingToProductInTable(int productRow, String toppingToAdd){
        String oldToppings = (String) m_productTable.getValueAt(productRow, TOPPINGS_COLUMN);
        String currentToppings = oldToppings + SPACE + toppingToAdd;
        m_productTable.setValueAt(currentToppings, productRow, TOPPINGS_COLUMN);
    }
    
    private double addToppingPriceToProductInTable(int productRow, double toppingPrice){
        double oldPrice = Double.parseDouble((String)m_productTable.getValueAt(productRow, PRICE_COLUMN));
        double currentPrice = oldPrice + toppingPrice;
        String stringPrice = String.valueOf(currentPrice);
        m_productTable.setValueAt(stringPrice, productRow, PRICE_COLUMN);
        return currentPrice;
    }
    
    private void modifyProductInDataBase(int finalProductId, double priceWithNewTopping){
        FinalProductManager finalProductManager = new FinalProductManagerImplementation();
        List<FinalProduct> finalProductFoundList = finalProductManager.searchById(finalProductId);
        FinalProduct finalProductToModify = finalProductFoundList.get(0);
        finalProductToModify.setPrice(priceWithNewTopping);
        finalProductManager.modify(finalProductToModify);
    }
    
    public void addExtraToppingToTable(String toppingName, double toppingPrice, int finalProductId) {
        int productRow = m_productTable.getRowCount() - 1;  
        addToppingToProductInTable(productRow, toppingName); 
        double priceWithNewTopping = addToppingPriceToProductInTable(productRow, toppingPrice);
        modifyProductInDataBase(finalProductId, priceWithNewTopping);   
        calculateDiscounts();
    }
    
    private void calculateDiscounts(){
        m_subTotalField.setText(String.valueOf(calculateSubTotal()));  
        boolean isZeroDiscountPercentage = Double.parseDouble(m_discountPercentageField.getText()) == 0;
        boolean isZeroDiscountCash = Double.parseDouble(m_discountCashField.getText()) == 0;
        if(isZeroDiscountPercentage && isZeroDiscountCash){
            double subTotal = calculateSubTotal();
            m_totalField.setText(String.valueOf(subTotal));
        } else {
            if(isDiscountInPercentage){
                setTotalsWithPercentageDiscountField();
            } else {
                if(isDiscountInCash){
                    setTotalsWithCashDiscountField();
                } else {
                    //isDiscountWithTotalField
                    setDiscounts();
                }
            }
        }
    }
    
    private void setDiscounts(){
        double saleTotal = Double.parseDouble(m_totalField.getText());
        double saleSubTotal = calculateSubTotal();
        double cashDiscount = saleSubTotal - saleTotal;
        m_discountCashField.setText(String.valueOf(cashDiscount));
        setTotalsWithCashDiscountField();
    }
    
    private void setTotalsWithPercentageDiscountField(){
        double currentPercentageDiscount = Double.parseDouble(m_discountPercentageField.getText());
        double saleTotalCuantity = calculateTotalWithDiscountPercentageField(currentPercentageDiscount);
        m_totalField.setText(String.valueOf(saleTotalCuantity));
        double cashDiscountCuantity = calculateDiscountCash(currentPercentageDiscount);
        m_discountCashField.setText(String.valueOf(cashDiscountCuantity));
    }
  
    private void setTotalsWithCashDiscountField(){
        double currentCashDiscount = Double.parseDouble(m_discountCashField.getText());
        double discountPercentage = calculateDiscountPercentage(currentCashDiscount);
        m_discountPercentageField.setText(String.valueOf(discountPercentage));
        double saleTotal = calculateSubTotal() - currentCashDiscount;
        m_totalField.setText(String.valueOf(saleTotal));
    }
    
    private double calculateDiscountPercentage(double cashDiscountCuantity){
        double total =((cashDiscountCuantity) * PERCENTAGE) / calculateSubTotal();
        return total; 
    }
    
    private double calculateTotalWithDiscountPercentageField(double currentPercentageDiscount){
        double currentPercentageDiscountInDecimal = currentPercentageDiscount / PERCENTAGE;
        double subTotal = calculateSubTotal();
        double cashToDiscount = subTotal * currentPercentageDiscountInDecimal;
        double saleTotal = subTotal - cashToDiscount;
        return saleTotal;
    }
    
    private double calculateDiscountCash(double currentDiscount){
        double subTotal = calculateSubTotal();
        double saleWithDiscount = calculateTotalWithDiscountPercentageField(currentDiscount);
        double cashDiscounted = subTotal - saleWithDiscount;
        return cashDiscounted;
    }
      
    private double calculateSubTotal(){
        int currentProduct = 0;
        double subTotal = 0;
        for(currentProduct = 0; currentProduct < m_productTable.getRowCount(); currentProduct ++){
            String currentProductPrice = (String) m_productTable.getValueAt(currentProduct, PRICE_COLUMN);
            double productPrice = Double.parseDouble(currentProductPrice);
            subTotal = subTotal + productPrice;
        }
        return subTotal;
    }
    
    
    private void m_productSizeComboBoxItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_m_productSizeComboBoxItemStateChanged
        Size selectedSize = (Size) m_productSizeComboBox.getSelectedItem();
        switch(selectedSize){
            case SMALL :
                m_firstToppingComboBox.setVisible(true);
                m_secondToppingComboBox.setVisible(true);
                m_thirdToppingComboBox.setVisible(true);
                m_fourthToppingComboBox.setVisible(false);
                m_fifthToppingComboBox.setVisible(false);
                break;
            case MEDIUM :
                m_firstToppingComboBox.setVisible(true);
                m_secondToppingComboBox.setVisible(true);
                m_thirdToppingComboBox.setVisible(true);
                m_fourthToppingComboBox.setVisible(true);
                m_fifthToppingComboBox.setVisible(false);
                break;
            case LARGE :
                m_firstToppingComboBox.setVisible(true);
                m_secondToppingComboBox.setVisible(true);
                m_thirdToppingComboBox.setVisible(true);
                m_fourthToppingComboBox.setVisible(true);
                m_fifthToppingComboBox.setVisible(true);
                break;
            default :
                m_firstToppingComboBox.setVisible(false);
                m_secondToppingComboBox.setVisible(false);
                m_thirdToppingComboBox.setVisible(false);
                m_fourthToppingComboBox.setVisible(false);
                m_fifthToppingComboBox.setVisible(false);
            }
    }//GEN-LAST:event_m_productSizeComboBoxItemStateChanged

    
    private void m_baseProductAddButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_m_baseProductAddButtonActionPerformed
        FinalProduct finalProduct = saveProductToDataBase();
        addProductToTable(finalProduct);
    }//GEN-LAST:event_m_baseProductAddButtonActionPerformed

    
    private void m_extraToppingActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_m_extraToppingActionPerformed
        FinalProduct finalProduct = saveProductToDataBase();
        addProductToTable(finalProduct);
        this.setEnabled(false);
        ExtraTopping extraToppingWindow = new ExtraTopping(this, finalProduct.getId());
        extraToppingWindow.setVisible(true);
    }//GEN-LAST:event_m_extraToppingActionPerformed

    private void m_completeSaleButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_m_completeSaleButtonActionPerformed
       //aceptar Venta
    }//GEN-LAST:event_m_completeSaleButtonActionPerformed

    private void m_discountCashFieldKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_m_discountCashFieldKeyReleased
        setTotalsWithCashDiscountField();
        isDiscountInPercentage = false;
        isDiscountInCash = true;
    }//GEN-LAST:event_m_discountCashFieldKeyReleased

    private void m_discountPercentageFieldKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_m_discountPercentageFieldKeyReleased
        setTotalsWithPercentageDiscountField();
        isDiscountInPercentage = true;
        isDiscountInCash = false;
    }//GEN-LAST:event_m_discountPercentageFieldKeyReleased

    private void m_totalFieldKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_m_totalFieldKeyReleased
        setDiscounts();
        isDiscountInPercentage = false;
        isDiscountInCash = false;
    }//GEN-LAST:event_m_totalFieldKeyReleased

    private void removeFinalProductFromDataBase(int finalProductId){
        FinalProductManager finalProductManager = new FinalProductManagerImplementation();
        List<FinalProduct> productToDeleteList = finalProductManager.searchById(finalProductId);
        FinalProduct finalProduct = productToDeleteList.get(0);
        finalProductManager.remove(finalProduct);
    }
    
    private int getProductIdFromRow(int rowToDelete){
        String FinalProductIdString = (String) m_productTable.getValueAt(rowToDelete, ID_COLUMN);
        int selectedProductId = Integer.parseInt(FinalProductIdString);
        return selectedProductId;
    }
    
    private void m_removeProductButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_m_removeProductButtonActionPerformed
        DefaultTableModel tableModel = (DefaultTableModel) m_productTable.getModel();
        boolean isMoreThanOneProduct = m_productTable.getRowCount() > 1;
        if(isMoreThanOneProduct){
            int selectedProductRow = m_productTable.getSelectedRow();
            int selectedProductId = getProductIdFromRow(selectedProductRow);
            removeFinalProductFromDataBase(selectedProductId);
            tableModel.removeRow(selectedProductRow);
            calculateDiscounts();
        } else {
            boolean isOneProduct = m_productTable.getRowCount() == 1;
            if(isOneProduct){
                int selectedProductRow = m_productTable.getSelectedRow();
                int selectedProductId = getProductIdFromRow(selectedProductRow);
                removeFinalProductFromDataBase(selectedProductId);
                tableModel.removeRow(selectedProductRow);
                setFieldsToZero();
            } else {
                //no rows
            }
        }
    }//GEN-LAST:event_m_removeProductButtonActionPerformed

    private void m_otherProductButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_m_otherProductButtonActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_m_otherProductButtonActionPerformed

    private void deleteAllProductsFromDataBase(){
        int tableRow = 0;
        for(tableRow = 0; tableRow < m_productTable.getRowCount(); tableRow++ ){
            int currentProductId = getProductIdFromRow(tableRow);
            FinalProductManager finalProductManager = new FinalProductManagerImplementation();
            List<FinalProduct> foundProduct = finalProductManager.searchById(currentProductId);
            FinalProduct finalProductToRemove = foundProduct.get(0);
            finalProductManager.remove(finalProductToRemove);
        }
    }
    
    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        deleteAllProductsFromDataBase();
        Main main = new Main();
        main.setVisible(true);
        this.dispose();
    }//GEN-LAST:event_formWindowClosing

    private void m_searchCustomerButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_m_searchCustomerButtonActionPerformed
        this.setEnabled(false);
        CustomersView customersView = new CustomersView(this);
        customersView.setVisible(true);
    }//GEN-LAST:event_m_searchCustomerButtonActionPerformed
    
    
    private void setFieldsToZero(){
        m_subTotalField.setText(String.valueOf(0));
        m_discountPercentageField.setText(String.valueOf(0));
        m_discountCashField.setText(String.valueOf(0));
        m_totalField.setText(String.valueOf(0));
    }
    
     /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(SalesModule.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(SalesModule.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(SalesModule.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(SalesModule.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new SalesModule().setVisible(true);
            }
        });
    }
    
    private boolean isDiscountInCash;
    private boolean isDiscountInPercentage;
    private static final int PERCENTAGE = 100;
    private static final int PRICE_COLUMN = 3;
    private static final int ROW_ELEMENTS = 4;
    private static final int NAME_COLUMN = 1;
    private static final int ID_COLUMN = 0;
    private static final int TOPPINGS_COLUMN = 2;
    private static final String SPACE = ", ";
    //private BaseProductManager m_baseProductManager;
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel m_TotalLabel;
    private javax.swing.JButton m_baseProductAddButton;
    private javax.swing.JComboBox m_baseProductComboBox;
    private javax.swing.JButton m_completeSaleButton;
    private javax.swing.JLabel m_customerNameLabel;
    private javax.swing.JTextField m_customerNameTextField;
    private javax.swing.JTextField m_discountCashField;
    private javax.swing.JLabel m_discountCashLabel;
    private javax.swing.JTextField m_discountPercentageField;
    private javax.swing.JLabel m_discountPercentageLabel;
    private javax.swing.JButton m_extraTopping;
    private javax.swing.JComboBox m_fifthToppingComboBox;
    private javax.swing.JComboBox m_firstToppingComboBox;
    private javax.swing.JComboBox m_fourthToppingComboBox;
    private javax.swing.JButton m_otherProductButton;
    private javax.swing.JComboBox m_otherProductsComboBox;
    private javax.swing.JLabel m_percentageLabel;
    private javax.swing.JComboBox m_productSizeComboBox;
    private javax.swing.JTable m_productTable;
    private javax.swing.JButton m_removeProductButton;
    private javax.swing.JButton m_searchBaseProduct;
    private javax.swing.JButton m_searchCustomerButton;
    private javax.swing.JButton m_searchOtherProduct;
    private javax.swing.JComboBox m_secondToppingComboBox;
    private javax.swing.JTextField m_subTotalField;
    private javax.swing.JLabel m_subTotalLabel;
    private javax.swing.JComboBox m_thirdToppingComboBox;
    private javax.swing.JTextField m_totalField;
    private org.jdesktop.beansbinding.BindingGroup bindingGroup;
    // End of variables declaration//GEN-END:variables

   
}