/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package ViewControllers;

import Entities.*;
import Helpers.MessageDisplayManger;
import Helpers.MessageType;
import Managers.*;
import java.util.*;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author bzeheatnix
 */
public class StatisticsView extends javax.swing.JFrame {

    private int COLUMN_NAME_POSITION = 0;
    private int COLUMN_QUANTITY_POSITION = 1;
    private String NAME = "Nombre";
    private String QUANTITY = "Cantidad";

    /**
     * Creates new form StatisticsView
     */
    public StatisticsView() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        m_dateField = new com.toedter.calendar.JDateChooser();
        m_basesListButton = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        m_statisticsTable = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setTitle("Estad√≠sticas");
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        m_basesListButton.setText("Bases");
        m_basesListButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                m_basesListButtonActionPerformed(evt);
            }
        });

        m_statisticsTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null},
                {null},
                {null},
                {null}
            },
            new String [] {
                "Nombre"
            }
        ));
        jScrollPane1.setViewportView(m_statisticsTable);

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .add(55, 55, 55)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(layout.createSequentialGroup()
                        .add(18, 18, 18)
                        .add(m_dateField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 162, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                    .add(jScrollPane1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 202, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(layout.createSequentialGroup()
                        .add(56, 56, 56)
                        .add(m_basesListButton)))
                .addContainerGap(44, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, layout.createSequentialGroup()
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .add(m_dateField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .add(22, 22, 22)
                .add(m_basesListButton)
                .add(18, 18, 18)
                .add(jScrollPane1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 341, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .add(17, 17, 17))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        AdministratorView administratorView = new AdministratorView();
        administratorView.setVisible(rootPaneCheckingEnabled);
        this.dispose();
    }//GEN-LAST:event_formWindowClosing

    private void m_basesListButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_m_basesListButtonActionPerformed
        List salesInDate = dateFormatModifier();
        showAllBaseProducts(salesInDate);
    }//GEN-LAST:event_m_basesListButtonActionPerformed

    private DefaultTableModel createTableModel() {
        DefaultTableModel model = new DefaultTableModel() {

            @Override
            public boolean isCellEditable(int row, int column) {
                return false;
            }
        };

        String[] columnNames = new String[1];
        columnNames[COLUMN_NAME_POSITION] = NAME;

        model.setColumnIdentifiers(columnNames);

        return model;
    }

    public List dateFormatModifier() {
        Date date = m_dateField.getDate();
        String dateString = convertCalendarDateToString(date);
        SaleManager saleManager = new SaleManagerImplementation();
        List<Sale> salesList = saleManager.getAll();
        Iterator<Sale> saleIterator = salesList.iterator();
        List<Sale> salesInDate = new ArrayList<Sale>();
        while (saleIterator.hasNext()) {
            Sale currentSale = saleIterator.next();
            Date dateSale = currentSale.getDate();
            String convertUtilDateToString = convertUtilDateToString(dateSale);
            if (convertUtilDateToString.equalsIgnoreCase(dateString)) {
                salesInDate.add(currentSale);
            }
        }
        
        return salesInDate;
    }

    private String convertUtilDateToString(Date date) {
        String stringDate = date.toString();
        String[] splittedString = stringDate.split(SPACE_BAR);
        String datePartOfString = splittedString[0];
        return datePartOfString;

    }

    private String convertCalendarDateToString(Date date) {
        String year = String.valueOf(date.getYear() + YEAR_CONSTANT);
        String dateString = year + SPACE;
        dateString = dateString + String.valueOf(date.getMonth() + MONTH_CONVERTER) + SPACE;
        Calendar calendar = m_dateField.getCalendar();
        int daySelected = calendar.get(DAY_FIELD);
        if (daySelected <= FIRST_9_NUMBERS) {
            dateString = dateString + ZERO + String.valueOf(daySelected);
        } else {
            dateString = dateString + String.valueOf(daySelected);
        }

        return dateString;
    }

//    public List<Sale> getAllDaySales(Date date) {
//        SaleManager saleManager = new SaleManagerImplementation();
//        List<Sale> sales = saleManager.getAll();
//
//        return sales;
//    }

    public void showAllBaseProducts(List salesInDate) {
//        List<Sale> daySales = getAllDaySales();;
        DefaultTableModel model = this.createTableModel();
        if (salesInDate == null) {
            this.m_statisticsTable.setModel(model);
            MessageDisplayManger.showInformation(MessageType.NO_SALES_FOUND, this);
            return;
        }

        String[] customerData = new String[1];
        Iterator<Sale> saleIterator = salesInDate.iterator();
        while (saleIterator.hasNext()) {
            Sale sale = saleIterator.next();

            SaleFinalProductsManager saleFinalProductManager = new SaleFinalProductsManagerImplementation();

            List<SaleFinalProducts> finalProductsList = saleFinalProductManager.getAll();
            Iterator<SaleFinalProducts> saleFinalProductIterator = finalProductsList.iterator();

            while (saleFinalProductIterator.hasNext()) {
                SaleFinalProducts saleFinalProduct = saleFinalProductIterator.next();
                SaleFinalProductsId saleFinalProductsId = saleFinalProduct.getId();
                int saleId = saleFinalProductsId.getSaleId();
                if (sale.getId().intValue() == saleId) {
                    SaleFinalProductsId saleFinalProductId = saleFinalProduct.getId();
                    FinalProductManager finalProductManager = new FinalProductManagerImplementation();
                    List<FinalProduct> finalProductFound = finalProductManager.searchById(saleFinalProductId.getFinalProductsId());
                    FinalProduct finalProduct = finalProductFound.get(0);
                    int baseProductId = finalProduct.getBaseProduct();
                    BaseProductManager baseProductManager = new BaseProductManagerImplementation();
                    List<BaseProduct> baseProductFound = baseProductManager.searchById(baseProductId);
                    BaseProduct baseProduct = baseProductFound.get(0);
                    customerData[COLUMN_NAME_POSITION] = baseProduct.getName();
                }
            }


            model.addRow(customerData);
        }
        this.m_statisticsTable.setModel(model);
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /*
         * Set the Nimbus look and feel
         */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /*
         * If Nimbus (introduced in Java SE 6) is not available, stay with the
         * default look and feel. For details see
         * http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(StatisticsView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(StatisticsView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(StatisticsView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(StatisticsView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /*
         * Create and display the form
         */
        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                new StatisticsView().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton m_basesListButton;
    private com.toedter.calendar.JDateChooser m_dateField;
    private javax.swing.JTable m_statisticsTable;
    // End of variables declaration//GEN-END:variables
    private final static String SPACE_BAR = " ";
    private final static String ZERO = "0";
    private final static int MONTH_CONVERTER = 1;
    private final static int DAY_FIELD = 5;
    private final static int FIRST_9_NUMBERS = 9;
    private final static int YEAR_CONSTANT = 1900;
    private final static String SPACE = "-";
}
