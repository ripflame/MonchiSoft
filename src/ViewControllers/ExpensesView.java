
package ViewControllers;


import Entities.Expense;
import Helpers.MessageDisplayManger;
import Helpers.MessageType;
import Managers.ExpenseManager;
import Managers.ExpenseManagerImplementation;
import java.sql.Date;
import java.util.Iterator;
import java.util.List;
import javax.swing.ListSelectionModel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Ivan
 */
public class ExpensesView extends javax.swing.JFrame {

    /**
     * Creates new form ExpensesView
     */
    public ExpensesView() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        m_expensesTable = new javax.swing.JTable();
        jToolBar1 = new javax.swing.JToolBar();
        m_newButton = new javax.swing.JButton();
        m_removeButton = new javax.swing.JButton();
        m_modifyButton = new javax.swing.JButton();
        filler1 = new javax.swing.Box.Filler(new java.awt.Dimension(180, 0), new java.awt.Dimension(180, 0), new java.awt.Dimension(180, 0));
        m_showAllButton = new javax.swing.JButton();
        m_searchField = new java.awt.TextField();
        m_searchButton = new java.awt.Button();
        jMenuBar1 = new javax.swing.JMenuBar();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Gestor de gastos");
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosed(java.awt.event.WindowEvent evt) {
                formWindowClosed(evt);
            }
        });

        m_expensesTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Id", "Vendedor", "Descripcion", "Total", "Fecha"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.Double.class, java.lang.String.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jScrollPane1.setViewportView(m_expensesTable);

        jToolBar1.setFloatable(false);
        jToolBar1.setRollover(true);

        m_newButton.setText("Nuevo");
        m_newButton.setFocusable(false);
        m_newButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        m_newButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        m_newButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                m_newButtonActionPerformed(evt);
            }
        });
        jToolBar1.add(m_newButton);

        m_removeButton.setFocusable(false);
        m_removeButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        m_removeButton.setLabel("Eliminar");
        m_removeButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        m_removeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                m_removeButtonActionPerformed(evt);
            }
        });
        jToolBar1.add(m_removeButton);

        m_modifyButton.setText("Modificar");
        m_modifyButton.setFocusable(false);
        m_modifyButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        m_modifyButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        m_modifyButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                m_modifyButtonActionPerformed(evt);
            }
        });
        jToolBar1.add(m_modifyButton);
        jToolBar1.add(filler1);

        m_showAllButton.setText("Mostrar todos");
        m_showAllButton.setFocusable(false);
        m_showAllButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        m_showAllButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        m_showAllButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                m_showAllButtonActionPerformed(evt);
            }
        });
        jToolBar1.add(m_showAllButton);

        m_searchField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                m_searchFieldActionPerformed(evt);
            }
        });

        m_searchButton.setLabel("Buscar");
        m_searchButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                m_searchButtonActionPerformed(evt);
            }
        });
        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jToolBar1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(m_searchField, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(18, 18, 18)
                        .addComponent(m_searchButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(9, 9, 9))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addComponent(jToolBar1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(28, 28, 28)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(m_searchField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(m_searchButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(32, 32, 32)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 180, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

     public void showAllExpenses() {
        List expenses = this.getExpenses();
        DefaultTableModel model = this.createTableModel();
        if (expenses == null) {
            this.m_expensesTable.setModel(model);
            MessageDisplayManger.showInformation(MessageType.NO_EXPENSE_FOUND, this );
            return;
        }
        Iterator<Expense> iterator = expenses.iterator();
        this.showDataTable(iterator, model, expenses);
        this.m_expensesTable.setModel(model);
        this.rowSelection();
 
    }
     
     
    private void m_newButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_m_newButtonActionPerformed
       this.openNewView();
    }//GEN-LAST:event_m_newButtonActionPerformed

    
    private void m_removeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_m_removeButtonActionPerformed
        int selectedRow = this.m_expensesTable.getSelectedRow(); 
        if (selectedRow > -1) {
            Expense selectedExpense = this.selectedExpenseTable(selectedRow);
            ExpenseManager expenseManager = new ExpenseManagerImplementation();
            expenseManager.remove(selectedExpense);
            this.showAllExpenses();
        } else if (selectedRow == -1) { 
            MessageDisplayManger.showInformation(MessageType.NO_CELL_SELECTED, this );
        }
    }//GEN-LAST:event_m_removeButtonActionPerformed

    
    private void m_showAllButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_m_showAllButtonActionPerformed
        this.m_searchField.setText("");
        this.showAllExpenses();
    }//GEN-LAST:event_m_showAllButtonActionPerformed

    
    private void m_modifyButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_m_modifyButtonActionPerformed
       int selectedRow = this.m_expensesTable.getSelectedRow();        
       if(selectedRow > -1){
       Expense selectedExpense = this.selectedExpenseTable(selectedRow);
            CaptureExpenseDataView modifyExpenseView = new CaptureExpenseDataView(this, true, selectedExpense);
            modifyExpenseView.setLocationRelativeTo(this);
            modifyExpenseView.setVisible(true);
       }else if (selectedRow == -1) {
           if(selectedRow == -1)MessageDisplayManger.showInformation(MessageType.NO_CELL_SELECTED, this );
       } 
    }//GEN-LAST:event_m_modifyButtonActionPerformed

    
    private void m_searchFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_m_searchFieldActionPerformed
      
    }//GEN-LAST:event_m_searchFieldActionPerformed

    
    private void m_searchButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_m_searchButtonActionPerformed
       if (this.validData()) {
            List<Expense> foundExpense = this.getExpense(this.m_searchField.getText());
            this.showFoundExpense(foundExpense);
        }
    }//GEN-LAST:event_m_searchButtonActionPerformed

    
    private void formWindowClosed(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosed

        AdministratorView administratorView = new AdministratorView();
        administratorView.setVisible(rootPaneCheckingEnabled);
    }//GEN-LAST:event_formWindowClosed

    private void openNewView(){
        CaptureExpenseDataView addExpenseView = new CaptureExpenseDataView(this, true);
        addExpenseView.setLocationRelativeTo(this);
        addExpenseView.setVisible(true);
    }
    
    private List getExpense(String supplier) {
        ExpenseManager expenseManager = new ExpenseManagerImplementation();
        List<Expense> foundExpense = expenseManager.searchBySupplier(supplier);
        
        return foundExpense;
    }
    
    
    private List getExpenses() {
        ExpenseManager expenseManager = new ExpenseManagerImplementation();
        List<Expense> expenses = expenseManager.getAll();
        
        return expenses;
    }
    
    
    private void showFoundExpense(List expenseFound) {        
        DefaultTableModel model = this.createTableModel();
        if (expenseFound == null) {
            this.m_expensesTable.setModel(model);
            MessageDisplayManger.showInformation(MessageType.NO_SUPPLIER_FOUND, this );
            return;
        }
        Iterator<Expense> iterator = expenseFound.iterator();
        this.showDataTable(iterator, model, expenseFound);
        this.m_expensesTable.setModel(model);
        this.rowSelection();
    }
    
    
    private boolean validData() {
        boolean validData = true;

        if (this.m_searchField.getText().isEmpty()) {
            MessageDisplayManger.showError(MessageType.SEARCH_FIELD_EMPTY, this );
            validData = false;
        } 

        return validData;
    }
    
    
    private DefaultTableModel createTableModel() {
        DefaultTableModel model = new DefaultTableModel() {
          @Override
          public boolean isCellEditable(int row, int column) {
              return false;
          }
        };
        String[] columnNames = new String[5];
        columnNames[0] = "Id";
        columnNames[1] = "Vendedor";
        columnNames[2] = "Descripción";
        columnNames[3] = "Total";
        columnNames[4] = "Fecha";
        
        model.setColumnIdentifiers(columnNames);
        
        return model;
    }
    
    
    private void rowSelection() {
        this.m_expensesTable.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        this.m_expensesTable.setRowSelectionAllowed(true);
    }
    
    private void showDataTable(Iterator<Expense> iterator, DefaultTableModel model, List expenseFound){
        String[] expenseData = new String[5];
        iterator = expenseFound.iterator();
        while (iterator.hasNext()) {
            Expense expense = (Expense)iterator.next();
            expenseData[0] = Integer.toString(expense.getId());
            expenseData[1] = expense.getSupplier();
            expenseData[2] = expense.getDescription();
            expenseData[3] = Double.toString(expense.getTotal());
            expenseData[4] = expense.getDate().toString();
            model.addRow(expenseData);
        }      
    }
    
    private Expense selectedExpenseTable(int selectedRow){
            int idExpense = Integer.parseInt((String) this.m_expensesTable.getValueAt(selectedRow, 0));
            String expenseSupplier = (String) this.m_expensesTable.getValueAt(selectedRow, 1);
            String expenseDescription = (String) this.m_expensesTable.getValueAt(selectedRow, 2);
            Double expenseTotal = Double.parseDouble((String)this.m_expensesTable.getValueAt(selectedRow, 3));
            Date expenseDate = Date.valueOf((String) this.m_expensesTable.getValueAt(selectedRow, 4));
            Expense selectedExpense = new Expense(expenseDate, 
                                                  expenseSupplier, 
                                                  expenseDescription, 
                                                  expenseTotal
                                                 );
            selectedExpense.setId(idExpense);
            return selectedExpense; 
         
        
   }
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.Box.Filler filler1;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JToolBar jToolBar1;
    private javax.swing.JTable m_expensesTable;
    private javax.swing.JButton m_modifyButton;
    private javax.swing.JButton m_newButton;
    private javax.swing.JButton m_removeButton;
    private java.awt.Button m_searchButton;
    private java.awt.TextField m_searchField;
    private javax.swing.JButton m_showAllButton;
    // End of variables declaration//GEN-END:variables
}
