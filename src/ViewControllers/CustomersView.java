/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package ViewControllers;

import Entities.Customer;
import Helpers.MessageDisplayManger;
import Helpers.MessageType;
import Managers.CustomerManager;
import Managers.CustomerManagerImplementation;
import java.util.Iterator;
import java.util.List;
import javax.swing.ListSelectionModel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Ripflame
 */
public class CustomersView extends javax.swing.JFrame {

    /**
     * Creates new form CustomersView
     */
    public CustomersView() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        filtroBusqueda = new javax.swing.ButtonGroup();
        jToolBar1 = new javax.swing.JToolBar();
        newButton = new javax.swing.JButton();
        modifyButton = new javax.swing.JButton();
        removeButton = new javax.swing.JButton();
        filler1 = new javax.swing.Box.Filler(new java.awt.Dimension(180, 0), new java.awt.Dimension(180, 0), new java.awt.Dimension(180, 0));
        showAllButton = new javax.swing.JButton();
        searchField = new javax.swing.JTextField();
        searchButton = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        customersTable = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Gesti√≥n de Clientes");
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosed(java.awt.event.WindowEvent evt) {
                formWindowClosed(evt);
            }
        });

        jToolBar1.setFloatable(false);
        jToolBar1.setRollover(true);

        newButton.setText("Nuevo");
        newButton.setFocusable(false);
        newButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        newButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        newButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                newButtonActionPerformed(evt);
            }
        });
        jToolBar1.add(newButton);

        modifyButton.setText("Modificar");
        modifyButton.setFocusable(false);
        modifyButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        modifyButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        modifyButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                modifyButtonActionPerformed(evt);
            }
        });
        jToolBar1.add(modifyButton);

        removeButton.setFocusable(false);
        removeButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        removeButton.setLabel("Eliminar");
        removeButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        removeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removeButtonActionPerformed(evt);
            }
        });
        jToolBar1.add(removeButton);
        jToolBar1.add(filler1);

        showAllButton.setText("Mostrar todos");
        showAllButton.setFocusable(false);
        showAllButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        showAllButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        showAllButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                showAllButtonActionPerformed(evt);
            }
        });
        jToolBar1.add(showAllButton);

        searchButton.setText("Buscar");
        searchButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchButtonActionPerformed(evt);
            }
        });

        customersTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Id", "Nombre", "Visitas"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.Integer.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        customersTable.setColumnSelectionAllowed(true);
        customersTable.getTableHeader().setReorderingAllowed(false);
        jScrollPane1.setViewportView(customersTable);
        customersTable.getColumnModel().getSelectionModel().setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jToolBar1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, layout.createSequentialGroup()
                        .add(0, 0, Short.MAX_VALUE)
                        .add(jScrollPane1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 430, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                    .add(layout.createSequentialGroup()
                        .add(searchField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 339, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(searchButton)
                        .add(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .add(jToolBar1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 25, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .add(18, 18, 18)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(searchField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(searchButton))
                .add(18, 18, 18)
                .add(jScrollPane1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 233, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(41, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void newButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_newButtonActionPerformed
        CaptureCustomerDataView addCustomerView = new CaptureCustomerDataView(this, true);
        addCustomerView.setLocationRelativeTo(this);
        addCustomerView.setVisible(true);
    }//GEN-LAST:event_newButtonActionPerformed

    private void modifyButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_modifyButtonActionPerformed
        int selectedRow = this.customersTable.getSelectedRow();        
        if (selectedRow > -1) {
            int customerID = Integer.parseInt((String) this.customersTable.getValueAt(selectedRow, 0));
            String customerName = (String) this.customersTable.getValueAt(selectedRow, 1);
            Customer selectedCustomer = new Customer(customerName);
            selectedCustomer.setId(customerID);
            CaptureCustomerDataView modifyCustomerView = new CaptureCustomerDataView(this, true, selectedCustomer);
            modifyCustomerView.setLocationRelativeTo(this);
            modifyCustomerView.setVisible(true);
        } else if (selectedRow == -1) {
            MessageDisplayManger.showInformation(MessageType.NO_CELL_SELECTED, this );
        }
    }//GEN-LAST:event_modifyButtonActionPerformed

    private void searchButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchButtonActionPerformed
        
        if (this.validData()) {
            List foundCustomer = this.getCustomer(this.searchField.getText());
            this.showFoundCustomer(foundCustomer);
        }
    }//GEN-LAST:event_searchButtonActionPerformed

    private void showAllButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_showAllButtonActionPerformed
        this.searchField.setText("");
        this.showAllCustomers();
    }//GEN-LAST:event_showAllButtonActionPerformed

    private void removeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeButtonActionPerformed
        int selectedRow = this.customersTable.getSelectedRow();        
        if (selectedRow > -1) {
            int idCustomer = Integer.parseInt((String) this.customersTable.getValueAt(selectedRow, 0));
            String customerName = (String) this.customersTable.getValueAt(selectedRow, 1);
            Customer selectedCustomer = new Customer(customerName);
            selectedCustomer.setId(idCustomer);
            CustomerManager customerManager = new CustomerManagerImplementation();
            customerManager.remove(selectedCustomer);
            
            this.showAllCustomers();
        } else if (selectedRow == -1) {
            MessageDisplayManger.showInformation(MessageType.NO_CELL_SELECTED, this );
        }
    }//GEN-LAST:event_removeButtonActionPerformed

    private void formWindowClosed(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosed
        AdministratorView administratorView = new AdministratorView();
        administratorView.setVisible(rootPaneCheckingEnabled);
    }//GEN-LAST:event_formWindowClosed

    private boolean validData() {
        boolean validData = true;

        if (this.searchField.getText().isEmpty()) {
            MessageDisplayManger.showError(MessageType.SEARCH_FIELD_EMPTY, this );
            validData = false;
        } 

        return validData;
    }
    
    private List getCustomer(String name) {
        CustomerManager customerManager = new CustomerManagerImplementation();
        List foundCustomer = customerManager.searchByName(name);
        
        return foundCustomer;
    }
    
    private List getCustomers() {
        CustomerManager customerManager = new CustomerManagerImplementation();
        List customers = customerManager.getAll();
        
        return customers;
    }
    
    private DefaultTableModel createTableModel() {
        DefaultTableModel model = new DefaultTableModel() {
          @Override
          public boolean isCellEditable(int row, int column) {
              return false;
          }
        };
        
        String[] columnNames = new String[3];
        columnNames[0] = "Id";
        columnNames[1] = "Nombre";
        columnNames[2] = "Visitas";
        
        model.setColumnIdentifiers(columnNames);
        
        return model;
    }
    
    public void showAllCustomers() {
        List customers = this.getCustomers();
        DefaultTableModel model = this.createTableModel();
        if (customers == null) {
            this.customersTable.setModel(model);
            MessageDisplayManger.showInformation(MessageType.NO_COSTUMER_FOUND, this );
            return;
        }
        
        String[] customerData = new String[2];
        Iterator<Customer> iterator = customers.iterator();
        while (iterator.hasNext()) {
            Customer customer = (Customer)iterator.next();
            customerData[0] = Integer.toString(customer.getId());
            customerData[1] = customer.getName();
            model.addRow(customerData);
        }
        this.customersTable.setModel(model);
        this.rowSelection();
    }
    
    private void showFoundCustomer(List customerFound) {        
        DefaultTableModel model = this.createTableModel();
        if (customerFound == null) {
            this.customersTable.setModel(model);
            MessageDisplayManger.showInformation(MessageType.NO_COSTUMER_FOUND, this );
            return;
        }
        
        String[] customerData = new String[3];
        Iterator<Customer> iterator = customerFound.iterator();
        while (iterator.hasNext()) {
            Customer customer = (Customer)iterator.next();
            customerData[0] = Integer.toString(customer.getId());
            customerData[1] = customer.getName();
            customerData[2] = "";
            model.addRow(customerData);
        }
        
        this.customersTable.setModel(model);
        this.rowSelection();
    }
    
    private void rowSelection() {
        this.customersTable.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        this.customersTable.setRowSelectionAllowed(true);
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable customersTable;
    private javax.swing.Box.Filler filler1;
    private javax.swing.ButtonGroup filtroBusqueda;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JToolBar jToolBar1;
    private javax.swing.JButton modifyButton;
    private javax.swing.JButton newButton;
    private javax.swing.JButton removeButton;
    private javax.swing.JButton searchButton;
    private javax.swing.JTextField searchField;
    private javax.swing.JButton showAllButton;
    // End of variables declaration//GEN-END:variables
}
